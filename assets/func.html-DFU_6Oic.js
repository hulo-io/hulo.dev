import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{e as a,j as e,o as i}from"./app-DFW7q-6T.js";const l={};function t(p,n){return i(),a("div",null,n[0]||(n[0]=[e(`<h2 id="basic-syntax" tabindex="-1"><a class="header-anchor" href="#basic-syntax"><span>Basic Syntax</span></a></h2><blockquote><p>A <strong>function</strong> is a fundamental concept in programming, representing a block of code designed to perform a specific task. Functions are invoked by name, take arguments (inputs), and may return a result (output). The primary purpose of functions is to improve code reusability, readability, and modularity.</p></blockquote><h3 id="lambda-declare" tabindex="-1"><a class="header-anchor" href="#lambda-declare"><span>lambda declare</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>fn f() =&gt; println(&quot;Hello World!&quot;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fn f() =&gt; &quot;Hello World&quot;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fn f(x: num) =&gt; x * 2;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fn f(x: num, y: str) =&gt; { x + 10 , &quot;sss $y s&quot; };</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This syntax allows for more concise declarations of single-line functions.</p><h3 id="standard-declare" tabindex="-1"><a class="header-anchor" href="#standard-declare"><span>standard declare</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>import { pi } from &quot;math&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>pub fn f(s: str = &quot;default&quot;, i: num, args: ...any, {required ok: bool, name: str = &quot;user1&quot;}) {</span></span>
<span class="line"><span>    echo(&quot;s: $s, i: $i, args: $args, ok: $ok, name: $name&quot;)</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// method oneï¼Œ\${var_name} is unneccessary</span></span>
<span class="line"><span>f(&quot;abc&quot;, pi, 3.14, &quot;6&quot;, true, ok: true)</span></span>
<span class="line"><span>// method two, -ok also does not specify true; the default declaration -ok is true</span></span>
<span class="line"><span>f &quot;abc&quot; $pi 3.14 &quot;6&quot; true -ok true</span></span>
<span class="line"><span></span></span>
<span class="line"><span>pub fn sum(args: ...num) -&gt; num {</span></span>
<span class="line"><span>    let ret = 0</span></span>
<span class="line"><span>    loop (_, v: num) in args {</span></span>
<span class="line"><span>        ret += v</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    return ret</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>echo sum(1, pi, 5.27)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="multi-return-values" tabindex="-1"><a class="header-anchor" href="#multi-return-values"><span>multi return values</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>fn f(c: num) -&gt; (num | list&lt;num&gt;, str?, map&lt;str, any&gt;) {</span></span>
<span class="line"><span>    if c &gt; 10 {</span></span>
<span class="line"><span>        return 10, &quot;Hello&quot;, { &quot;x&quot;: 10 }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    return [1, 5], null, { &quot;y&quot;: 10 }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>let { a, b , c } = f(10)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>echo(a, b, c)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="comptime-function" tabindex="-1"><a class="header-anchor" href="#comptime-function"><span>comptime function</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>comptime fn my_print(msg: str) {</span></span>
<span class="line"><span>    println!(msg)</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>println!(&quot;hi&quot;)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Compile-time functions are executed before they are translated into object code. In contrast to the traditional function, it just adds a <code>!</code> to work.</p><h2 id="overload" tabindex="-1"><a class="header-anchor" href="#overload"><span>Overload</span></a></h2><blockquote><p><strong>Function overloading</strong> refers to the ability to define multiple functions with the same name but different implementations based on varying numbers or types of parameters in the same scope. The compiler determines which specific function to call based on the characteristics of the arguments (number, type, or order) at the time of the function call. The primary purpose of function overloading is to enhance code flexibility and readability.</p></blockquote><h3 id="basic" tabindex="-1"><a class="header-anchor" href="#basic"><span>basic</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>fn f(s: str) =&gt; echo(s)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fn f(i: num) =&gt; echo $i</span></span>
<span class="line"><span></span></span>
<span class="line"><span>f(&quot;hello world&quot;)</span></span>
<span class="line"><span>f(3.14)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="complex" tabindex="-1"><a class="header-anchor" href="#complex"><span>complex</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>fn f(s: str | num) =&gt; echo(s)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fn f(s: bool) =&gt; echo(s)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>class user {</span></span>
<span class="line"><span>    name: str</span></span>
<span class="line"><span>    pwd: str</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fn f(s: user) =&gt; echo(s)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="incorrect-writing" tabindex="-1"><a class="header-anchor" href="#incorrect-writing"><span>incorrect writing</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>fn f(s: str) =&gt; &quot;abc&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fn f(i: num) =&gt; 10</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This is not allow to return different values</p><h2 id="closure" tabindex="-1"><a class="header-anchor" href="#closure"><span>Closure</span></a></h2><blockquote><p>A <strong>closure</strong> is a function bundled with its lexical environment (variable scope) where it was defined. This allows the function to access variables in its original scope even when executed outside that scope. Closures are commonly used for data encapsulation, callback functions, and factory functions.<br> In simpler terms, a closure enables a function to &quot;remember&quot; the environment where it was created.</p></blockquote><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>fn incr(): fn() -&gt; num {</span></span>
<span class="line"><span>    let cnt: num = 0</span></span>
<span class="line"><span>    return fn (): num {</span></span>
<span class="line"><span>        cnt++</span></span>
<span class="line"><span>        return cnt</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>let c = incr()</span></span>
<span class="line"><span>echo(incr()) // 1</span></span>
<span class="line"><span>echo(incr()) // 2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,24)]))}const d=s(l,[["render",t],["__file","func.html.vue"]]),o=JSON.parse('{"path":"/handbook/base/func.html","title":"Function","lang":"en-US","frontmatter":{"title":"Function","icon":"fas fa-superscript","description":"Basic Syntax A function is a fundamental concept in programming, representing a block of code designed to perform a specific task. Functions are invoked by name, take arguments ...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/hulo.dev/handbook/base/func.html"}],["meta",{"property":"og:site_name","content":"Docs Demo"}],["meta",{"property":"og:title","content":"Function"}],["meta",{"property":"og:description","content":"Basic Syntax A function is a fundamental concept in programming, representing a block of code designed to perform a specific task. Functions are invoked by name, take arguments ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-03-15T15:41:01.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-15T15:41:01.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Function\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-03-15T15:41:01.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"The Hulo Authors\\",\\"url\\":\\"https://github.com/hulo-io\\"}]}"]]},"git":{"createdTime":1742053261000,"updatedTime":1742053261000,"contributors":[{"name":"ansurfen","username":"ansurfen","email":"axf593161@gmail.com","commits":1,"url":"https://github.com/ansurfen"}]},"readingTime":{"minutes":1.6,"words":481},"filePathRelative":"handbook/base/func.md","localizedDate":"March 15, 2025","autoDesc":true}');export{d as comp,o as data};
