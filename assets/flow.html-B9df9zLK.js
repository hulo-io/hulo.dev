import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{e as a,i,o as e}from"./app-sTnedtFS.js";const l={};function t(p,s){return e(),a("div",null,s[0]||(s[0]=[i(`<h2 id="if" tabindex="-1"><a class="header-anchor" href="#if"><span>If</span></a></h2><blockquote><p><strong>if</strong> is one of the most fundamental conditional control statements in programming, used to determine whether a block of code should execute based on the value of a boolean expression (true or false).</p></blockquote><div class="language-hulo line-numbers-mode" data-highlighter="shiki" data-ext="hulo" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> c</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">num</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">5</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> $c</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt; </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">!(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;c &lt; 3&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">} </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$c</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> == </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">!(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;c = 5&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">} </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">!(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;c != 5 &amp;&amp; c &gt; 3&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="match" tabindex="-1"><a class="header-anchor" href="#match"><span>Match</span></a></h2><blockquote><p><strong>match</strong> is a control structure used to execute different code branches based on a given value or pattern. Its purpose is to simplify complex conditional logic by providing a more intuitive and structured way to handle multiple scenarios.<br> With pattern matching, it can evaluate not only single values but also the shape, type, or content of data structures. This makes <strong>match</strong> particularly effective and concise when working with complex data or implementing conditional branching.<br> Additionally, <strong>match</strong> typically includes a default branch to handle cases that do not explicitly match any pattern, ensuring robustness and predictability in program behavior.</p></blockquote><h3 id="值匹配" tabindex="-1"><a class="header-anchor" href="#值匹配"><span>值匹配</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>let max = $a &gt; $b ? $a : $b</span></span>
<span class="line"><span></span></span>
<span class="line"><span>$max = ($a &gt; $b) ? $a : ($b &gt; 10 ? $b : ($b &gt; $max ? $b : $max))</span></span>
<span class="line"><span></span></span>
<span class="line"><span>match $max {</span></span>
<span class="line"><span>    1 =&gt; println(&quot;one!&quot;),</span></span>
<span class="line"><span>    2 | 3 | 5 =&gt; println(&quot;this is prime&quot;),</span></span>
<span class="line"><span>    13..19 =&gt; println($max),</span></span>
<span class="line"><span>    _ =&gt; println(&quot;default&quot;),</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="类型断言" tabindex="-1"><a class="header-anchor" href="#类型断言"><span>类型断言</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>let a = 10</span></span>
<span class="line"><span></span></span>
<span class="line"><span>let ok: str? = () =&gt; {</span></span>
<span class="line"><span>    match $a {</span></span>
<span class="line"><span>        num =&gt; return $a.to_str(),</span></span>
<span class="line"><span>        _ =&gt; null,</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="元组匹配" tabindex="-1"><a class="header-anchor" href="#元组匹配"><span>元组匹配</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>let pair: triple&lt;num&gt; = (2, -3)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>match $pair {</span></span>
<span class="line"><span>    (2, -3) =&gt; println(&quot;2, -3&quot;),</span></span>
<span class="line"><span>    (x, _) if $x % 2 == 0 =&gt; println(&quot;x is even&quot;),</span></span>
<span class="line"><span>    (x, y) if $x + y == 5 =&gt; println(&quot;x + y = 5&quot;),</span></span>
<span class="line"><span>    _ =&gt; println(&quot;null&quot;),</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="loop" tabindex="-1"><a class="header-anchor" href="#loop"><span>Loop</span></a></h2><blockquote><p>A <strong>loop</strong> is a control structure in programming used to repeatedly execute a block of code until a specific termination condition is met. Loops greatly reduce redundancy in code and enable efficient handling of data in bulk.</p></blockquote><h3 id="列表遍历" tabindex="-1"><a class="header-anchor" href="#列表遍历"><span>列表遍历</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>let arr: list&lt;num&gt; = [1, 3.14, 5.0, 0.7]</span></span>
<span class="line"><span></span></span>
<span class="line"><span>loop (let i = 0; $i &lt; $arr.len(); $i++) {</span></span>
<span class="line"><span>    echo $i $arr[$i]</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>loop (i: num, v: num) in $arr {</span></span>
<span class="line"><span>    echo $i $v</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数值遍历" tabindex="-1"><a class="header-anchor" href="#数值遍历"><span>数值遍历</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>// 从 1 遍历到 5，步长为 0.1</span></span>
<span class="line"><span>loop i in range(1, 5, 0.1) {</span></span>
<span class="line"><span>    echo $i</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="while循环" tabindex="-1"><a class="header-anchor" href="#while循环"><span>while循环</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>let cnt = 0</span></span>
<span class="line"><span>loop {</span></span>
<span class="line"><span>    $cnt++</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    if ($cnt &gt; 100) {</span></span>
<span class="line"><span>        break</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="do-while循环" tabindex="-1"><a class="header-anchor" href="#do-while循环"><span>do...while循环</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>let cnt = 0</span></span>
<span class="line"><span>do {</span></span>
<span class="line"><span>    $cnt++</span></span>
<span class="line"><span>} loop ($cnt &gt; 100)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="lambda表达式" tabindex="-1"><a class="header-anchor" href="#lambda表达式"><span>lambda表达式</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>let cnt = 0</span></span>
<span class="line"><span>let res: num = () =&gt; {</span></span>
<span class="line"><span>    loop {</span></span>
<span class="line"><span>        $cnt+=2</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        if $cnt == 10 {</span></span>
<span class="line"><span>            return $cnt * 2;</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    return -1</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="标签" tabindex="-1"><a class="header-anchor" href="#标签"><span>标签</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>L1: loop {</span></span>
<span class="line"><span>    println(&quot;enter l1&quot;)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    L2: loop {</span></span>
<span class="line"><span>        println(&quot;l2&quot;)</span></span>
<span class="line"><span>        break L1;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    println(&quot;exit l1&quot;)</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,25)]))}const c=n(l,[["render",t],["__file","flow.html.vue"]]),h=JSON.parse('{"path":"/grammar/base/flow.html","title":"Control Flow","lang":"en-US","frontmatter":{"title":"Control Flow","icon":"fas fa-repeat","date":"2025-04-13T00:00:00.000Z","category":"grammar","tag":["syntax","flow"],"license":"MIT","description":"If if is one of the most fundamental conditional control statements in programming, used to determine whether a block of code should execute based on the value of a boolean expr...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/docs/grammar/base/flow.html"}],["meta",{"property":"og:site_name","content":"Hulo"}],["meta",{"property":"og:title","content":"Control Flow"}],["meta",{"property":"og:description","content":"If if is one of the most fundamental conditional control statements in programming, used to determine whether a block of code should execute based on the value of a boolean expr..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-04-18T16:44:02.000Z"}],["meta",{"property":"article:tag","content":"syntax"}],["meta",{"property":"article:tag","content":"flow"}],["meta",{"property":"article:published_time","content":"2025-04-13T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-18T16:44:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Control Flow\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-04-13T00:00:00.000Z\\",\\"dateModified\\":\\"2025-04-18T16:44:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"The Hulo Authors\\",\\"url\\":\\"https://github.com/hulo-lang\\"}]}"]]},"git":{"createdTime":1742053261000,"updatedTime":1744994642000,"contributors":[{"name":"ansurfen","username":"ansurfen","email":"axf593161@gmail.com","commits":4,"url":"https://github.com/ansurfen"}]},"readingTime":{"minutes":1.42,"words":426},"filePathRelative":"grammar/base/flow.md","localizedDate":"April 13, 2025","autoDesc":true}');export{c as comp,h as data};
