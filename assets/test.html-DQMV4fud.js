import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{e as i,i as s,o as a}from"./app-CcJFEAps.js";const n={};function l(o,t){return a(),i("div",null,t[0]||(t[0]=[s(`<blockquote><p><strong>单元测试</strong>是一种用于验证程序中最小可测试单元行为是否符合预期的测试方法。通常，这些“单元”指的是函数、方法或类。</p><p>通过为每个函数编写对应的测试用例，开发者可以：</p><ul><li>验证程序逻辑是否正确</li><li>防止代码修改引入回归错误</li><li>保证边界条件和异常输入下系统行为的稳定性</li></ul></blockquote><p>在 Hulo 中对单元测试函数的名称最好以 <code>test_xxx</code> 的形式，xxx表示要测试的具体功能。这样书写的好处一目了然。<br> 此外，为了便于管理和维护，单元测试的函数请单独写在一个测试文件中，你可以以 <code>xxx_test.hl</code> 命名，或者其他名称，只要你乐意。不过最好还是采用 <code>_test</code> 标准化命名的形式。</p><div class="hint-container warning"><p class="hint-container-title">Warning</p><p>请不要将测试函数和非测试混合在一个文件中，这样编译器在编译的时候可能会在目标语言生成测试函数的定义。</p></div><div class="code-block-title"><div class="code-block-title-bar"><span class="title" data-title="math_test.hl">math_test.hl</span></div><div class="language-hulo" data-highlighter="shiki" data-ext="hulo" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">fn</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> test_add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    $a</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> :=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> + </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    assert_eq</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div></div><p>当你编写完成相应函数后，便可使用 <code>hulo</code> 或者 <code>hlpm</code> 命令进行单元测试。</p>`,5)]))}const h=e(n,[["render",l],["__file","test.html.vue"]]),c=JSON.parse('{"path":"/grammar/test.html","title":"Unit Test","lang":"en-US","frontmatter":{"title":"Unit Test","icon":"fa-solid fa-vial","date":"2025-04-19T00:00:00.000Z","category":"grammar","tag":["test"],"license":"MIT","description":"单元测试是一种用于验证程序中最小可测试单元行为是否符合预期的测试方法。通常，这些“单元”指的是函数、方法或类。 通过为每个函数编写对应的测试用例，开发者可以： 验证程序逻辑是否正确 防止代码修改引入回归错误 保证边界条件和异常输入下系统行为的稳定性 在 Hulo 中对单元测试函数的名称最好以 test_xxx 的形式，xxx表示要测试的具体功能。这样书...","head":[["meta",{"property":"og:url","content":"https://github.com/hulo-lang/docs/grammar/test.html"}],["meta",{"property":"og:site_name","content":"Hulo"}],["meta",{"property":"og:title","content":"Unit Test"}],["meta",{"property":"og:description","content":"单元测试是一种用于验证程序中最小可测试单元行为是否符合预期的测试方法。通常，这些“单元”指的是函数、方法或类。 通过为每个函数编写对应的测试用例，开发者可以： 验证程序逻辑是否正确 防止代码修改引入回归错误 保证边界条件和异常输入下系统行为的稳定性 在 Hulo 中对单元测试函数的名称最好以 test_xxx 的形式，xxx表示要测试的具体功能。这样书..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-04-19T17:17:06.000Z"}],["meta",{"property":"article:tag","content":"test"}],["meta",{"property":"article:published_time","content":"2025-04-19T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-19T17:17:06.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Unit Test\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-04-19T00:00:00.000Z\\",\\"dateModified\\":\\"2025-04-19T17:17:06.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"The Hulo Authors\\",\\"url\\":\\"https://github.com/hulo-lang\\"}]}"]]},"git":{"createdTime":1745036973000,"updatedTime":1745083026000,"contributors":[{"name":"ansurfen","username":"ansurfen","email":"axf593161@gmail.com","commits":2,"url":"https://github.com/ansurfen"}]},"readingTime":{"minutes":1.09,"words":327},"filePathRelative":"grammar/test.md","localizedDate":"April 19, 2025","autoDesc":true}');export{h as comp,c as data};
