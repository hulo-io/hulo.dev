{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "hulo",
	"patterns": [
		{
			"include": "#comment"
		},
		{
			"include": "#constant"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#declaration"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#single_strings"
		},
		{
			"include": "#triple_strings"
		}
	],
	"repository": {
		"comment": {
			"patterns": [
				{
					"name": "comment.line.double-dash",
					"match": "\/\/.*$"
				},
				{
					"name": "comment.line.double-dash",
					"begin": "\/\\*",
					"end": "\\*\/"
				}
			]
		},
		"constant": {
			"patterns": [
				{
					"name": "constant.language",
					"match": "\\b(true|false|null)\\b"
				},
				{
					"name": "constant.numeric",
					"match": "\\b\\d+(\\.\\d+)?\\b"
				}
			]
		},
		"declaration": {
			"patterns": [
				{ 
					"match": "(@)(\\w+)",
					"captures": {
						"1": {
							"name": "keyword.operator"
						},
						"2": {
							"name": "entity.name.function"
						}
					}
				},
				{
					"name": "keyword.control",
					"match": "\\b(package|mod|part|use|class|enum|trait|fn|let|var|const|import|as|from|type|typeof|operator|impl|for|extend|try|catch|finally|defer|throw|throws)\\b"
				},
				{
					"name": "storage.modifier",
					"match": "\\b(static|final|pub|required)\\b"
				},
				{
					"name": "entity.name.type",
					"match": "\\b(str|num|bool|any|map|list)\\b"
				},
				{
					"name": "entity.name.function.hulo",
					"match": "(?<=\\.)\\s*(\\w+)\\s*\\(",
					"captures": {
						"1": {
							"name": "entity.name.function.hulo"
						}
					}
				},
				{
					"name": "variable.other",
					"match": "\\$\\w+"
				},
				{
					"name": "constant.other",
					"match": "\\-\\w+"
				},
				{
					"name": "comment.line.double-dash",
					"match": "(?<=^|[^-\\w])--(?=$|[^-\\w])"
				},
				{
					"name": "keyword.operator",
					"match": "(@|\\.\\.\\.|\\?|:|\\!|&|\\||>|<|=|\\+|\\-|\\*|\\/|%|\\+=|\\-=|\\*=|\\/=|%=)"
				},
				{
					"name": "entity.name.function",
					"match": "(?<=fn \\s*)\\w+"
				},
				{
					"name": "entity.name.class",
					"match": "(?<=(class|trait|enum|impl|mod) \\s*)\\w+"
				},
				{
					"name": "entity.name.type",
					"match": "(?<=as \\s*)\\w+"
				},
				{
					"name": "entity.name.function.hulo",
					"match": "(\\w+)(!?)\\(",
					"captures": {
						"1": {
							"name": "entity.name.function.hulo"
						},
						"2": {
							"name": "keyword.operator"
						}
					}
				},
				{
					"name": "variable.parameter",
					"match": "(?<=for \\s*)((?:\\w+(?:\\s*(,)\\s*)?)+)",
					"captures": {
						"2": {
							"name": "keyword.operator"
						}
					}
				},
				{
					"name": "variable.parameter",
					"match": "(?<=class \\s*\\w+: \\s*)((?:\\w+(?:\\s*(,)\\s*)?)+)",
					"captures": {
						"2": {
							"name": "keyword.operator"
						}
					}
				},
				{
					"name": "variable.language",
					"match": "\\b(this|super)\\b"
				},
				{
					"name": "variable.parameter",
					"match": "(?<=\\(\\s*)(\\w+)(?=\\s*:)",
					"captures": {
						"2": {
							"name": "variable.other"
						}
					}
				},
				{
					"name": "variable.parameter",
					"match": "(?<=\\{\\s*)(\\w+)(?=\\s*:)",
					"captures": {
						"2": {
							"name": "variable.other"
						}
					}
				},
				{
					"name": "variable.parameter",
					"match": "(?<=required \\s*)(\\w+)(?=\\s*:)",
					"captures": {
						"2": {
							"name": "variable.other"
						}
					}
				},
				{
					"name": "variable.parameter",
					"match": "(?<=,\\s*)(\\w+)(?=\\s*:)",
					"captures": {
						"2": {
							"name": "variable.other"
						}
					}
				},
				{
					"name": "entity.name.type",
					"match": "\\w+(?={)"
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"name": "keyword.control.hulo",
					"match": "\\b(if|else|match|do|loop|in|range|return|break|continue|comptime|declare|factory)\\b"
				},
				{
					"name": "keyword.operator.new",
					"match": "\\b(new|delete)\\b"
				}
			]
		},
		"multi_strings": {
			"name": "string.quoted.triple.hulo",
			"begin": "\"\"\"",
			"end": "\"\"\""
		},
		"single_strings": {
			"name": "string.quoted.single.hulo",
			"begin": "'",
			"end": "'",
			"patterns": [
				{
					"name": "constant.character.escape.hulo",
					"match": "\\\\."
				}
			]
		},
		"strings": {
			"name": "string.quoted.double.hulo",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.hulo",
					"match": "\\\\."
				},
				{
					"begin": "(\\${)",
					"end": "(})",
					"beginCaptures": {
						"1": {
							"name": "variable.language"
						}
					},
					"endCaptures": {
						"1": {
							"name": "variable.language"
						}
					}
				},
				{
					"name": "variable.language",
					"match": "\\$\\w+"
				}
			]
		}
	},
	"scopeName": "source.hulo"
}